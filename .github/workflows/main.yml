# 워크플로우의 이름
name: Send Commit to Notion

# 이 워크플로우가 언제 실행될지를 정의합니다.
on:
  push:
    branches:
      - main  # main 브랜치에만 적용.

# 실행될 작업들을 정의합니다.
jobs:
  send-to-notion:
    # 작업이 실행될 환경을 지정합니다.
    runs-on: ubuntu-latest
    
    # 작업의 단계들을 정의합니다.
    steps:
      # 1. 소스 코드를 체크아웃합니다.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Node.js 환경 설정 (★매우 중요, 추가된 부분★)
      # 스크립트를 실행하고 npm 패키지를 설치하기 위해 Node.js 환경을 준비합니다.
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # 안정적인 LTS 버전 사용

      # 3. Notion 클라이언트 라이브러리 설치 (★매우 중요, 추가된 부분★)
      # 스크립트에서 require('@notionhq/client')를 사용하기 위해 npm으로 설치합니다.
      - name: Install Notion Client SDK
        run: npm install @notionhq/client

      # 4. 커밋 정보를 Notion으로 전송합니다.
      - name: Send Commit Info to Notion
        uses: actions/github-script@v6
        # 환경 변수를 통해 GitHub Secrets에 저장된 값들을 스크립트로 전달합니다.
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        with:
          script: |
            // Notion API 클라이언트를 가져옵니다. (이제 정상적으로 불러올 수 있습니다)
            const { Client } = require("@notionhq/client");

            // Notion 클라이언트를 초기화합니다.
            const notion = new Client({ auth: process.env.NOTION_API_KEY });
            const databaseId = process.env.NOTION_DATABASE_ID;
            
            // GitHub에서 제공하는 컨텍스트에서 커밋 정보를 가져옵니다.
            const commits = context.payload.commits;

            // 각 커밋에 대해 반복 작업을 수행합니다.
            for (const commit of commits) {
              // 머지 커밋은 제외 (선택 사항)
              if (commit.message.startsWith('Merge pull request')) {
                  console.log('Skipping merge commit.');
                  continue;
              }
              
              const commitMessage = commit.message;
              const authorName = commit.author.name;
              const commitUrl = commit.url;
              const commitDate = commit.timestamp;
              const repoName = context.repo.repo;

              try {
                // Notion 데이터베이스에 새 페이지(항목)를 생성합니다.
                await notion.pages.create({
                  parent: { database_id: databaseId },
                  properties: {
                    "커밋 메시지": {
                      title: [
                        { text: { content: commitMessage } }
                      ]
                    },
                    "작성자": {
                      rich_text: [
                        { text: { content: authorName } }
                      ]
                    },
                    "리포지토리": {
                      rich_text: [
                        { text: { content: repoName } }
                      ]
                    },
                    "커밋 링크": {
                      url: commitUrl
                    },
                    "날짜": {
                      date: {
                        start: commitDate
                      }
                    }
                  }
                });
                console.log(`Successfully added commit: "${commitMessage}" to Notion.`);
              } catch (error) {
                console.error("Error sending to Notion:", error.body || error);
              }
            }
