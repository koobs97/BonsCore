<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.koo.bonscore.biz.store.mapper.GourmetRecordMapper">

    <select id="selectRecordId" resultType="long">
        SELECT SEQ_GOURMET_RECORDS.NEXTVAL FROM DUAL
    </select>

    <!-- 맛집 저장소 데이터 저장 -->
    <insert id="mergeGourmetRecord" parameterType="com.koo.bonscore.biz.store.dto.req.GourmetRecordCreateRequest">
         MERGE /* com.koo.bonscore.biz.store.mapper.GourmetRecordMapper.insertGourmetRecord */
          INTO GOURMET_RECORDS                          /* 맛집 기록 정보 */
         USING DUAL
            ON ( RECORD_ID = #{recordId} )              /* 맛집 기록 ID */
          WHEN MATCHED THEN
        UPDATE
           SET STORE_NAME       = #{name}               /* 가게 이름 */
             , CATEGORY         = #{category}           /* 카테고리 */
             , VISIT_DATE       = #{visitDate}          /* 방문 날짜 */
             , RATING           = #{rating}             /* 별점 */
             , MEMO             = #{memo}               /* 메모 */
             , REFERENCE_URL    = #{referenceUrl}       /* 참조 URL */
             , UPDATED_AT       = #{updatedAt}          /* 수정일시 */
      WHEN NOT MATCHED THEN
        INSERT
             (
               RECORD_ID
             , USER_ID
             , STORE_NAME
             , CATEGORY
             , VISIT_DATE
             , RATING
             , MEMO
             , REFERENCE_URL
             , CREATED_AT
             , UPDATED_AT
             )
        VALUES
             (
               #{recordId}
             , #{userId}
             , #{name}
             , #{category}
             , #{visitDate}
             , #{rating}
             , #{memo}
             , #{referenceUrl}
             , #{createdAt}
             , #{updatedAt}
             )
    </insert>

    <!-- 전달된 파일 목록에 없는 이미지들을 DB에서 삭제 -->
    <delete id="deleteImagesNotInList" parameterType="map">
        DELETE /* com.koo.bonscore.biz.store.mapper.GourmetRecordMapper.deleteImagesNotInList */
          FROM GOURMET_IMAGES
         WHERE RECORD_ID = #{recordId}
        <if test="images != null and images.size() > 0">
            AND STORED_FILE_NAME NOT IN
            <foreach collection="images" item="image" open="(" separator="," close=")">
                #{image.storedFileName}
            </foreach>
        </if>
    </delete>

    <update id="mergeGourmetImages" parameterType="com.koo.bonscore.biz.store.dto.req.GourmetRecordCreateRequest">
        <!-- Oracle의 경우 MERGE를 여러 번 실행하기 위해 BEGIN-END 블록 사용 -->
        BEGIN
        <foreach collection="images" item="image">
            MERGE /* com.koo.bonscore.biz.store.mapper.GourmetRecordMapper.mergeGourmetImages */
             INTO GOURMET_IMAGES I
            USING DUAL
              ON (      I.RECORD_ID         = #{recordId}
                    AND I.STORED_FILE_NAME  = #{image.storedFileName}
                 )
            WHEN NOT MATCHED THEN
          INSERT (
                 IMAGE_ID
               , RECORD_ID
               , ORIGINAL_FILE_NAME
               , STORED_FILE_NAME
               , IMAGE_URL
               , FILE_SIZE
               , CREATED_AT
               )
          VALUES (
                 SEQ_GOURMET_IMAGES.NEXTVAL
               , #{recordId}
               , #{image.originalFileName}
               , #{image.storedFileName}
               , #{image.imageUrl}
               , #{image.fileSize}
               , #{createdAt}
               );
        </foreach>
        END;
    </update>

    <resultMap id="gourmetRecordWithImagesMap" type="com.koo.bonscore.biz.store.dto.res.GourmetRecordDto">
        <id property="id" column="RECORD_ID"/>
        <result property="name" column="STORE_NAME"/>
        <result property="category" column="CATEGORY"/>
        <result property="visitDate" column="VISIT_DATE"/>
        <result property="rating" column="RATING"/>
        <result property="memo" column="MEMO"/>
        <result property="referenceUrl" column="REFERENCE_URL"/>

        <collection property="images" ofType="com.koo.bonscore.biz.store.dto.req.GourmetImageDto">
            <id property="imageId" column="IMAGE_ID"/>
            <result property="originalFileName" column="ORIGINAL_FILE_NAME"/>
            <result property="storedFileName" column="STORED_FILE_NAME"/>
            <result property="imageUrl" column="IMAGE_URL"/>
            <result property="fileSize" column="FILE_SIZE"/>
        </collection>
    </resultMap>

    <!-- 사용자 ID로 맛집 기록 목록 조회 (이미지 포함) -->
    <select id="selectGourmetRecordsByUserId" parameterType="string" resultMap="gourmetRecordWithImagesMap">
        SELECT /* com.koo.bonscore.biz.store.mapper.GourmetRecordMapper.selectGourmetRecordsByUserId */
               R.RECORD_ID
             , R.STORE_NAME
             , R.CATEGORY
             , R.VISIT_DATE
             , R.RATING
             , R.MEMO
             , R.REFERENCE_URL
             , I.IMAGE_ID
             , I.ORIGINAL_FILE_NAME
             , I.STORED_FILE_NAME
             , I.IMAGE_URL
             , I.FILE_SIZE
        FROM GOURMET_RECORDS R
   LEFT JOIN GOURMET_IMAGES  I
          ON R.RECORD_ID = I.RECORD_ID
       WHERE R.USER_ID   = #{userId}
    ORDER BY R.VISIT_DATE DESC, R.CREATED_AT DESC
    </select>

</mapper>